/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package basiclibrary;

import java.util.Random;
import java.util.HashSet;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.io.IOException;


public class Library {
    public static void main(String[] args) {
        String errors = checkSemiColon("C:\\Users\\soomr\\Documents\\Projects\\Code-401\\java-fundamentals\\basiclibrary\\lib\\src");
        System.out.println(errors);
        int[][] weeklyMonthTemperatures = {
                {66, 64, 58, 65, 71, 57, 60},
                {57, 65, 65, 70, 72, 65, 51},
                {55, 54, 60, 53, 59, 57, 61},
                {65, 56, 55, 52, 55, 62, 57}
        };

        String unseenTemperatures = findUnseenTemperatures(weeklyMonthTemperatures);
        System.out.println("Unseen temperatures: " + unseenTemperatures);

        List<String> votes = new ArrayList<>();
        votes.add("Bush");
        votes.add("Bush");
        votes.add("Bush");
        votes.add("Shrub");
        votes.add("Hedge");
        votes.add("Shrub");
        votes.add("Bush");
        votes.add("Hedge");
        votes.add("Bush");

        String winner = tally(votes);
        System.out.println(winner + " received the most votes!");
    }

    public static String checkSemiColon(String filepath) {
        Path path = Paths.get(filepath);
        StringBuilder errors = new StringBuilder();

        try {
            List<String> lines = Files.readAllLines(path);
            for (int i = 0; i < lines.size(); i++) {
                String line = lines.get(i).trim();

                if (line.isEmpty()
                        || line.endsWith("{")
                        || line.endsWith("}")
                        || line.contains("if")
                        || line.contains("else")) {
                    continue;
                }

                if (line.charAt(line.length() - 1) != ';') {
                    errors.append("Line " + (i + 1) + ": Missing semicolon.\n");
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return errors.toString();
    }

    public static String tally(List<String> votes) {
        Map<String, Integer> voteCounts = new HashMap<>();
        for (String vote : votes) {
            if (!voteCounts.containsKey(vote)) {
                voteCounts.put(vote, 0);
            }
            voteCounts.put(vote, voteCounts.get(vote) + 1);
        }
        Map.Entry<String, Integer> maxEntry = null;
        for (Map.Entry<String, Integer> entry : voteCounts.entrySet()) {
            if (maxEntry == null || entry.getValue().compareTo(maxEntry.getValue()) > 0) {
                maxEntry = entry;
            }
        }
        return maxEntry.getKey();
    }

    public static String findUnseenTemperatures(int[][] weeklyMonthTemperatures) {
        int minTemp = Integer.MAX_VALUE;
        int maxTemp = Integer.MIN_VALUE;

        HashSet<Integer> uniqueTemperatures = new HashSet<>();

        for (int week = 0; week < weeklyMonthTemperatures.length; week++) {
            for (int day = 0; day < weeklyMonthTemperatures[week].length; day++) {
                int temp = weeklyMonthTemperatures[week][day];
                minTemp = Math.min(minTemp, temp);
                maxTemp = Math.max(maxTemp, temp);
                uniqueTemperatures.add(temp);
            }

        }

        String unseenTemperatures = "";
        for (int i = minTemp; i <= maxTemp; i++) {
            if (!uniqueTemperatures.contains(i)) {
                unseenTemperatures = i + " ";
            }
        }
        return unseenTemperatures;
    }

    public int[] roll(int n) {
        int[] rolls = new int[n];
        Random random = new Random();
        int min = 1;
        int max = 6;

        for (int i = 0; i < n; i++) {
            rolls[i] = random.nextInt(max - min + 1) + min;
        }
        return rolls;
    }

    public boolean containsDuplicates(int[] array) {
        for (int i = 0; i < array.length; i++) {
            for (int j = i + 1; j < array.length; j++) {
                if (array[i] == array[j]) {
                    return true;
                }
            }
        }
        return false;
    }

    public double calculateAverage(int[] array) {
        int sum = 0;
        for (int i : array) {
            sum += i;
        }
        return (double) sum / array.length;
    }
}


//ChatGPT Help with nested array
//ChatGPT help with unseen temperature syntax